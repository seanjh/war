// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const createGame = `-- name: CreateGame :exec
INSERT INTO games (code) VALUES (?) RETURNING id, code
`

func (q *Queries) CreateGame(ctx context.Context, code string) error {
	_, err := q.db.ExecContext(ctx, createGame, code)
	return err
}

const createGameSession = `-- name: CreateGameSession :exec
INSERT INTO game_sessions (game_id, session_id, role) VALUES (?, ?, ?) RETURNING game_id, session_id, role
`

type CreateGameSessionParams struct {
	GameID    int64
	SessionID int64
	Role      sql.NullString
}

func (q *Queries) CreateGameSession(ctx context.Context, arg CreateGameSessionParams) error {
	_, err := q.db.ExecContext(ctx, createGameSession, arg.GameID, arg.SessionID, arg.Role)
	return err
}

const getGameSession = `-- name: GetGameSession :many
SELECT s.game_id, s.session_id, g.code
FROM game_sessions s
INNER JOIN games g ON g.id = s.game_id
WHERE s.game_id = ?
ORDER BY s.session_id
`

type GetGameSessionRow struct {
	GameID    int64
	SessionID int64
	Code      string
}

func (q *Queries) GetGameSession(ctx context.Context, gameID int64) ([]GetGameSessionRow, error) {
	rows, err := q.db.QueryContext(ctx, getGameSession, gameID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetGameSessionRow
	for rows.Next() {
		var i GetGameSessionRow
		if err := rows.Scan(&i.GameID, &i.SessionID, &i.Code); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
)

const createGame = `-- name: CreateGame :one
INSERT INTO games (id) VALUES (NULL) RETURNING id, code
`

type CreateGameRow struct {
	ID   int64
	Code string
}

func (q *Queries) CreateGame(ctx context.Context) (CreateGameRow, error) {
	row := q.db.QueryRowContext(ctx, createGame)
	var i CreateGameRow
	err := row.Scan(&i.ID, &i.Code)
	return i, err
}

const createHostGameSession = `-- name: CreateHostGameSession :exec
INSERT INTO game_sessions (game_id, session_id, role, deck) VALUES (?, ?, 1, ?), (?, NULL, 2, ?)
`

type CreateHostGameSessionParams struct {
	GameID    int64
	SessionID sql.NullString
	Deck      string
	GameID_2  int64
	Deck_2    string
}

func (q *Queries) CreateHostGameSession(ctx context.Context, arg CreateHostGameSessionParams) error {
	_, err := q.db.ExecContext(ctx, createHostGameSession,
		arg.GameID,
		arg.SessionID,
		arg.Deck,
		arg.GameID_2,
		arg.Deck_2,
	)
	return err
}

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (id) VALUES (?) RETURNING id, created
`

func (q *Queries) CreateSession(ctx context.Context, id string) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession, id)
	var i Session
	err := row.Scan(&i.ID, &i.Created)
	return i, err
}

const getGame = `-- name: GetGame :one
SELECT id, code FROM games
WHERE id = ? LIMIT 1
`

type GetGameRow struct {
	ID   int64
	Code string
}

func (q *Queries) GetGame(ctx context.Context, id int64) (GetGameRow, error) {
	row := q.db.QueryRowContext(ctx, getGame, id)
	var i GetGameRow
	err := row.Scan(&i.ID, &i.Code)
	return i, err
}

const getGameSessions = `-- name: GetGameSessions :many
SELECT game_id, COALESCE(session_id, ''), role, deck
FROM game_sessions
WHERE game_id = ?
ORDER BY role
`

type GetGameSessionsRow struct {
	GameID    int64
	SessionID string
	Role      int64
	Deck      string
}

func (q *Queries) GetGameSessions(ctx context.Context, gameID int64) ([]GetGameSessionsRow, error) {
	rows, err := q.db.QueryContext(ctx, getGameSessions, gameID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetGameSessionsRow
	for rows.Next() {
		var i GetGameSessionsRow
		if err := rows.Scan(
			&i.GameID,
			&i.SessionID,
			&i.Role,
			&i.Deck,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSession = `-- name: GetSession :one
SELECT id, created FROM sessions
WHERE id = ? LIMIT 1
`

func (q *Queries) GetSession(ctx context.Context, id string) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSession, id)
	var i Session
	err := row.Scan(&i.ID, &i.Created)
	return i, err
}

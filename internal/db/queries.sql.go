// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
)

const createDeck = `-- name: CreateDeck :exec
INSERT INTO decks (game_id, session_id, cards) VALUES (?, ?, ?)
`

type CreateDeckParams struct {
	GameID    int64
	SessionID sql.NullString
	Cards     string
}

func (q *Queries) CreateDeck(ctx context.Context, arg CreateDeckParams) error {
	_, err := q.db.ExecContext(ctx, createDeck, arg.GameID, arg.SessionID, arg.Cards)
	return err
}

const createGame = `-- name: CreateGame :one
INSERT INTO games (id, code) VALUES (NULL, NULL) RETURNING id, code
`

type CreateGameRow struct {
	ID   int64
	Code string
}

func (q *Queries) CreateGame(ctx context.Context) (CreateGameRow, error) {
	row := q.db.QueryRowContext(ctx, createGame)
	var i CreateGameRow
	err := row.Scan(&i.ID, &i.Code)
	return i, err
}

const createGameSession = `-- name: CreateGameSession :one
INSERT INTO game_sessions (game_id, session_id, role) VALUES (?, ?, ?) RETURNING game_id, session_id, role
`

type CreateGameSessionParams struct {
	GameID    int64
	SessionID string
	Role      int64
}

type CreateGameSessionRow struct {
	GameID    int64
	SessionID string
	Role      int64
}

func (q *Queries) CreateGameSession(ctx context.Context, arg CreateGameSessionParams) (CreateGameSessionRow, error) {
	row := q.db.QueryRowContext(ctx, createGameSession, arg.GameID, arg.SessionID, arg.Role)
	var i CreateGameSessionRow
	err := row.Scan(&i.GameID, &i.SessionID, &i.Role)
	return i, err
}

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (id) VALUES (?) RETURNING id, created
`

func (q *Queries) CreateSession(ctx context.Context, id string) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession, id)
	var i Session
	err := row.Scan(&i.ID, &i.Created)
	return i, err
}

const getGame = `-- name: GetGame :one
SELECT id, code FROM games
WHERE id = ? LIMIT 1
`

type GetGameRow struct {
	ID   int64
	Code string
}

func (q *Queries) GetGame(ctx context.Context, id int64) (GetGameRow, error) {
	row := q.db.QueryRowContext(ctx, getGame, id)
	var i GetGameRow
	err := row.Scan(&i.ID, &i.Code)
	return i, err
}

const getGameSession = `-- name: GetGameSession :many
SELECT s.game_id, s.session_id, g.code
FROM game_sessions s
INNER JOIN games g ON g.id = s.game_id
WHERE s.game_id = ?
ORDER BY s.session_id
`

type GetGameSessionRow struct {
	GameID    int64
	SessionID string
	Code      string
}

func (q *Queries) GetGameSession(ctx context.Context, gameID int64) ([]GetGameSessionRow, error) {
	rows, err := q.db.QueryContext(ctx, getGameSession, gameID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetGameSessionRow
	for rows.Next() {
		var i GetGameSessionRow
		if err := rows.Scan(&i.GameID, &i.SessionID, &i.Code); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSession = `-- name: GetSession :one
SELECT id, created FROM sessions
WHERE id = ? LIMIT 1
`

func (q *Queries) GetSession(ctx context.Context, id string) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSession, id)
	var i Session
	err := row.Scan(&i.ID, &i.Created)
	return i, err
}
